buildscript {
  dependencies {
    classpath("org.yaml:snakeyaml:1.23")
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.11")
  }
}

plugins {
  id 'au.com.dius.pact' version '4.1.0'
  id 'application'
  id 'checkstyle'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id "info.solidsoft.pitest" version '1.5.1'
  id "io.freefair.lombok" version "5.3.0"
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'jacoco'
  id 'org.flywaydb.flyway' version '8.5.2'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'org.sonarqube' version '3.0'
  id 'org.springframework.boot' version '2.3.11.RELEASE'
  id 'pmd'
  id 'uk.gov.hmcts.java' version '0.12.5'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
  junit              : '5.6.2',
  junitPlatform      : '1.6.2',
  pitest             : '1.5.2',
  reformLogging      : '5.1.7',
  reformHealthStarter: '0.0.5',
  serenity           : '2.2.12',
  springBoot         : '2.3.9.RELEASE',
  springHystrix      : '2.2.10.RELEASE',
  springfoxSwagger   : '2.9.2',
  pact_version       : '4.1.7'

]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]
mainClassName = 'uk.gov.hmcts.reform.bailcaseapi.Application'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contactTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
}

checkstyle.toolVersion = '9.2.1'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")
checkstyle.maxWarnings(0)

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

pmd {
  toolVersion = '6.41.0'
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'category/java/errorprone.xml',
    'category/java/bestpractices.xml'
  ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

  systemProperty "scenario", System.getProperty('scenario')

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

project.ext {
  pacticipant = 'bail_caseApi'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

jacoco {
  toolVersion = "0.8.4"
}

//TODO: include integration in parameter along with test once integration tests are added.
jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.bailcaseapi.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.bailcaseapi.infrastructure.config.*',
    'uk.gov.hmcts.reform.bailcaseapi.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
  mutationThreshold = 90
}

project.tasks['pitest'].group = "Verification"

sonarqube {
  properties {
    property "sonar.projectName", "IA :: Immigration & Asylum Bail Case API"
    property "sonar.projectKey", "IABAILCASEAPI"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/bailcaseapi/infrastructure/config/**," +
                                 "src/main/java/uk/gov/hmcts/reform/bailcaseapi/infrastructure/SystemDateProvider.java," +
                                 "src/main/java/uk/gov/hmcts/reform/bailcaseapi/Application.java"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

dependencyManagement {
  dependencies {
    // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
    //CVE-2020-13934
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.58') {
      entry 'tomcat-embed-core'
      entry 'tomcat-embed-el'
      entry 'tomcat-embed-websocket'
    }

    // CVE-2020-15522
    dependency group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'

    // CVE-2019-10086
    dependencySet(group: 'commons-beanutils', version: '1.9.4') {
      entry 'commons-beanutils'
    }

    //CVE-2021-42550
    dependencySet(group: 'ch.qos.logback', version: '1.2.10') {
      entry 'logback-classic'
      entry 'logback-core'
    }

  //CVE-2021-22060
    dependencySet(group: 'org.springframework', version: '5.2.19.RELEASE') {
      entry 'spring-aop'
      entry 'spring-beans'
      entry 'spring-context'
      entry 'spring-context-support'
      entry 'spring-core'
      entry 'spring-expression'
      entry 'spring-jcl'
      entry 'spring-web'
      entry 'spring-webmvc'
    }
  }
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: versions.springBoot
//  compile group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.10.RELEASE'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix
  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.1.RELEASE'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: versions.springBoot

  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger


//  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'

  compile group: 'com.google.guava', name: 'guava', version: '30.0-jre'
  compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
  compile group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'


//  compile group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLoggingVersion
//  compile group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLoggingVersion

//  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
//  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  compile group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
  testCompile (group: 'io.rest-assured', name: 'rest-assured-all', version: '4.3.1')
  testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
  testCompile group: 'org.mockito', name: 'mockito-core', version: '3.5.0'



  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  testCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
    force = true
  }

  integrationTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
    force = true
  }

  functionalTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
    force = true
  }

  contractTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
    force = true
  }

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

gradle.startParameter.continueOnFailure = true

bootJar {
  archiveFileName = 'ia-bail-case-api.jar'
  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed applications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
