server:
  port: ${PORT:4550}

management:
  endpoint:
    health:
      show-details: "always"
      status:
        http-mapping:
          UP: 200
          DOWN: 503
  endpoints:
    web:
      base-path: "/"
  health:
    probes:
      enabled: true
  services:
    idam:
      uri: ${IDAM_URL:http://127.0.0.1:4501}/health
      response: '"status":"UP"'
    documentsApi:
       uri: ${IA_CASE_DOCUMENTS_API_URL:http://127.0.0.1:8092}/health
       response: '"status":"UP"'
    serviceAuth:
      uri: ${S2S_URL:http://127.0.0.1:4502}/health
      response: '"status":"UP"'

feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full


hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000

#If you use a database then uncomment below lines and update db properties accordingly
spring:
  application:
    name: Immigration & Asylum bail case API
  main:
    allow-bean-definition-overriding: true
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID  _IDAM_URL:http://127.0.0.1:5000}/o
        registration:
          oidc:
            client-id: ${IA_IDAM_CLIENT_ID:ia}
            client-secret: ${IA_IDAM_SECRET:something}
      resourceserver:
        jwt:
          jwk-set-uri: ${OPEN_ID_IDAM_URL:http://127.0.0.1:5000}/o/jwks
#  datasource:
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}${DB_OPTIONS:}
#    username: ${DB_USER_NAME}
#    password: ${DB_PASSWORD}
#    properties:
#      charSet: UTF-8
#    hikari:
#      minimumIdle: 2
#      maximumPoolSize: 10
#      idleTimeout: 10000
#      poolName: {to-be-defined}HikariCP
#      maxLifetime: 7200000
#      connectionTimeout: 30000
#  jpa:
#    properties:
#      hibernate:
#        jdbc:
#          lob:
#            # silence the 'wall-of-text' - unnecessary exception throw about blob types
#            non_contextual_creation: true

#OpenID
idam:
  baseUrl: ${OPEN_ID_IDAM_URL:http://127.0.0.1:5000}
  redirectUrl: ${IA_IDAM_REDIRECT_URI:http://localhost:3002/oauth2/callback}
  s2s-auth:
    totp_secret: ${IA_S2S_SECRET:AAAAAAAAAAAAAAAC}
    microservice: ${IA_S2S_MICROSERVICE:ia}
    url: ${S2S_URL:http://127.0.0.1:4502}
  s2s-authorised:
    services: ${IA_S2S_AUTHORIZED_SERVICES:ccd,ccd_data,ccd_gw,ccd_ps,iac}
azure:
  application-insights:
    instrumentation-key: ${rpe.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}
documentsApi:
  endpoint: ${IA_CASE_DOCUMENTS_API_URL:http://127.0.0.1:8092}
  aboutToSubmitPath: "/bail/ccdAboutToSubmit"
  aboutToStartPath: "/bail/ccdAboutToStart"

### dependency configuration
idam.s2s-auth.totp_secret: ${IA_S2S_SECRET:AAAAAAAAAAAAAAAC}
idam.s2s-auth.microservice: ${IA_S2S_MICROSERVICE:ia}
idam.s2s-auth.url: ${S2S_URL:http://127.0.0.1:4502}

prof.ref.data.url: ${PROF_REF_DATA_URL:http://localhost:8991}
prof.ref.data.path.org.users: ${PROF_REF_DATA_ORG_USERS_PATH:/refdata/external/v1/organisations/users}
prof.ref.data.path.org.organisation: ${PROF_REF_DATA_ORG_ORGANISATION_PATH:/refdata/external/v1/organisations}
